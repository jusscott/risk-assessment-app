name: Risk Assessment App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Build Docker images
        run: |
          docker-compose build --parallel
      
      - name: Save Docker images
        run: |
          docker save -o api-gateway.tar risk-assessment-app-api-gateway
          docker save -o auth-service.tar risk-assessment-app-auth-service
          docker save -o questionnaire-service.tar risk-assessment-app-questionnaire-service
          docker save -o payment-service.tar risk-assessment-app-payment-service
          docker save -o analysis-service.tar risk-assessment-app-analysis-service
          docker save -o report-service.tar risk-assessment-app-report-service
          docker save -o frontend.tar risk-assessment-app-frontend
      
      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: |
            *.tar
          retention-days: 1
  
  unit-test:
    needs: build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service:
          - auth-service
          - questionnaire-service
          - payment-service
          - analysis-service
          - report-service
          - api-gateway
          - frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        working-directory: backend/${{ matrix.service }}
        run: npm ci
        if: ${{ matrix.service != 'frontend' }}
      
      - name: Install dependencies (frontend)
        working-directory: frontend
        run: npm ci
        if: ${{ matrix.service == 'frontend' }}
      
      - name: Run unit tests
        working-directory: ${{ matrix.service == 'frontend' && 'frontend' || format('backend/{0}', matrix.service) }}
        run: npm test
  
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
      
      - name: Load Docker images
        run: |
          docker load -i api-gateway.tar
          docker load -i auth-service.tar
          docker load -i questionnaire-service.tar
          docker load -i payment-service.tar
          docker load -i analysis-service.tar
          docker load -i report-service.tar
          docker load -i frontend.tar
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: tests/integration/package-lock.json
      
      - name: Install test dependencies
        working-directory: tests/integration
        run: npm ci
      
      - name: Run integration tests
        run: ./run-parallel-tests.sh
      
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: tests/integration/reports
          retention-days: 5
  
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
      
      - name: Load Docker images
        run: |
          docker load -i api-gateway.tar
          docker load -i auth-service.tar
          docker load -i questionnaire-service.tar
          docker load -i payment-service.tar
          docker load -i analysis-service.tar
          docker load -i report-service.tar
          docker load -i frontend.tar
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment steps here (e.g., pushing to container registry, deploying to Kubernetes)
  
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    environment: production # Requires manual approval in GitHub
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
      
      - name: Load Docker images
        run: |
          docker load -i api-gateway.tar
          docker load -i auth-service.tar
          docker load -i questionnaire-service.tar
          docker load -i payment-service.tar
          docker load -i analysis-service.tar
          docker load -i report-service.tar
          docker load -i frontend.tar
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add deployment steps here (e.g., pushing to container registry, deploying to Kubernetes)
