/**
 * Script to apply Prisma migrations and seed the database for payment-service
 */

const { execSync } = require('child_process');
const path = require('path');

// Set the working directory to the payment service directory
const paymentServiceDir = path.dirname(__dirname);
process.chdir(paymentServiceDir);

console.log('Current working directory:', process.cwd());

try {
  console.log('Applying migrations...');
  
  // Apply the migration manually using a raw SQL query
  const { PrismaClient } = require('@prisma/client');
  const fs = require('fs');
  
  // Connect to the database
  const prisma = new PrismaClient();
  
  // Get all migration directories
  const migrationsDir = path.join(__dirname, '..', 'prisma', 'migrations');
  const migrationDirs = fs.readdirSync(migrationsDir)
    .filter(dir => fs.statSync(path.join(migrationsDir, dir)).isDirectory())
    .sort(); // Sort to ensure migrations are applied in order
  
  console.log('Found migrations: ', migrationDirs.join(', '));
  
  // Read all migration SQL files
  const migrationSqls = [];
  for (const dir of migrationDirs) {
    const migrationPath = path.join(migrationsDir, dir, 'migration.sql');
    try {
      const sql = fs.readFileSync(migrationPath, 'utf8');
      migrationSqls.push({ 
        dir, 
        sql 
      });
      console.log(`Loaded migration: ${dir}`);
    } catch (err) {
      console.log(`Migration file not found in ${dir}, skipping`);
    }
  }
  
  async function applyMigration() {
    try {
      console.log('Checking if migration already applied...');
      
      // Check if Plan table already exists
      let tableExists = false;
      try {
        await prisma.$queryRaw`SELECT * FROM "Plan" LIMIT 1`;
        tableExists = true;
        console.log('Plan table already exists, skipping migration');
      } catch (err) {
        console.log('Plan table does not exist, applying migration');
      }
      
      // Apply initial migration if table doesn't exist
      if (!tableExists) {
        const initialMigration = migrationSqls.find(m => m.dir.includes('initial'));
        if (initialMigration) {
          console.log('Applying initial migration...');
          const statements = initialMigration.sql.split(';').filter(statement => statement.trim() !== '');
          
          // Execute each statement
          for (const statement of statements) {
            try {
              await prisma.$executeRawUnsafe(`${statement};`);
            } catch (err) {
              console.error('Error executing statement:', err);
              console.error('Statement:', statement);
            }
          }
          
          console.log('Initial migration applied successfully');
        }
      }
      
      // Apply all other migrations, even if table exists
      for (const migration of migrationSqls) {
        if (!migration.dir.includes('initial')) {
          console.log(`Applying migration: ${migration.dir}...`);
          const statements = migration.sql.split(';').filter(statement => statement.trim() !== '');
          
          // Execute each statement
          for (const statement of statements) {
            try {
              await prisma.$executeRawUnsafe(`${statement};`);
            } catch (err) {
              console.error(`Error executing statement in ${migration.dir}:`, err);
              console.error('Statement:', statement);
            }
          }
          
          console.log(`Migration ${migration.dir} applied successfully`);
        }
      }
      
      // Update migration_lock.toml to mark the database as initialized
      const lockPath = path.join(__dirname, '..', 'prisma', 'migration_lock.toml');
      fs.writeFileSync(lockPath, '# Please do not edit this file manually\n# It should be committed to your VCS\n\nprovider = "postgresql"\n');
      
      console.log('Running seed script...');
      // Import and run seed script
      const seed = require('../prisma/seed.js');
      
      console.log('All tasks completed successfully');
    } catch (error) {
      console.error('Error applying migration:', error);
      process.exit(1);
    } finally {
      await prisma.$disconnect();
    }
  }
  
  applyMigration();
  
} catch (error) {
  console.error('Error:', error.message);
  process.exit(1);
}
