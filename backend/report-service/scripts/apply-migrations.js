/**
 * Script to apply Prisma migrations and seed the database for report-service
 */

const { execSync } = require('child_process');
const path = require('path');

// Set the working directory to the report service directory
const reportServiceDir = path.dirname(__dirname);
process.chdir(reportServiceDir);

console.log('Current working directory:', process.cwd());

try {
  console.log('Applying migrations...');
  
  // Apply the migration manually using a raw SQL query
  const { PrismaClient } = require('@prisma/client');
  const fs = require('fs');
  
  // Connect to the database
  const prisma = new PrismaClient();
  
  // Read the migration SQL file
  const migrationPath = path.join(__dirname, '..', 'prisma', 'migrations', '20250521_initial', 'migration.sql');
  const migrationSql = fs.readFileSync(migrationPath, 'utf8');
  
  async function applyMigration() {
    try {
      console.log('Checking if migration already applied...');
      
      // Check if Report table already exists
      let tableExists = false;
      try {
        await prisma.$queryRaw`SELECT * FROM "Report" LIMIT 1`;
        tableExists = true;
        console.log('Report table already exists, skipping migration');
      } catch (err) {
        console.log('Report table does not exist, applying migration');
      }
      
      if (!tableExists) {
        // Split the SQL into individual statements
        const statements = migrationSql.split(';').filter(statement => statement.trim() !== '');
        
        // Execute each statement
        for (const statement of statements) {
          try {
            await prisma.$executeRawUnsafe(`${statement};`);
          } catch (err) {
            console.error('Error executing statement:', err);
            console.error('Statement:', statement);
          }
        }
        
        console.log('Migration applied successfully');
      }
      
      // Update migration_lock.toml to mark the database as initialized
      const lockPath = path.join(__dirname, '..', 'prisma', 'migration_lock.toml');
      fs.writeFileSync(lockPath, '# Please do not edit this file manually\n# It should be committed to your VCS\n\nprovider = "postgresql"\n');
      
      console.log('Running seed script...');
      // Import and run seed script
      const seed = require('../prisma/seed.js');
      
      console.log('All tasks completed successfully');
    } catch (error) {
      console.error('Error applying migration:', error);
      process.exit(1);
    } finally {
      await prisma.$disconnect();
    }
  }
  
  applyMigration();
  
} catch (error) {
  console.error('Error:', error.message);
  process.exit(1);
}
